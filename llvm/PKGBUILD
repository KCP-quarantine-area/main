
pkgbase="llvm"
pkgname=('llvm' 'clang' 'clang-analyzer')
pkgver=3.7.1
subver=3.7.1
_gcc_ver=4.9.3
pkgrel=1
arch=('x86_64')
url="http://llvm.org/"
license=('custom:University of Illinois/NCSA Open Source License')
makedepends=('gcc-libs' 'libffi' 'python2' 'ocaml' "gcc=${_gcc_ver}" 'groff'
             'swig' 'cmake') # 'ocaml-ctypes' 'findlib' needed to have CMake build find ocaml
source=("http://llvm.org/releases/${pkgver}/${pkgbase}-${pkgver}.src.tar.xz"
        "http://llvm.org/releases/$pkgver/cfe-$pkgver.src.tar.xz"
        "http://llvm.org/releases/$pkgver/compiler-rt-$pkgver.src.tar.xz"
        'llvm_link.patch')
md5sums=('bf8b3a2c79e61212c5409041dfdbd319'
         '0acd026b5529164197563d135a8fd83e'
         '1c6975daf30bb3b0473b53c3a1a6ff01'
         '4c985569b7d473135625bd0d61ec1bb6')

prepare() {
  cd "${srcdir}/${pkgbase}-${pkgver}.src"
  
  # doc directories
  #sed -i 's:\$(PROJ_prefix)/docs/llvm:$(PROJ_prefix)/share/doc/llvm:' Makefile.config.in
  
  # http://llvm.org/bugs/show_bug.cgi?id=4840
  mv "${srcdir}/cfe-${pkgver}.src" tools/clang

  mv "$srcdir/compiler-rt-$pkgver.src" projects/compiler-rt
  
  # http://llvm.org/bugs/show_bug.cgi?id=22742
  chmod -R u=rwX,go=rX "$srcdir/llvm-$pkgver.src"
  
  # avoid huge binaries, patch from trunk/3.8, allows -DLLVM_LINK_LLVM_DYLIB:BOOL=ON
  patch -p1 -i "${srcdir}"/llvm_link.patch
}
  
build() {
  #cd "${srcdir}/${pkgbase}-${pkgver}"
  mkdir -p build
  cd build
  
  export PKG_CONFIG_PATH='/usr/lib/pkgconfig'
  _ffi_include_flags=$(pkg-config --cflags-only-I libffi)
  _ffi_libs_flags=$(pkg-config --libs-only-L libffi)

  _cxx_headers="/usr/include/c++/${_gcc_ver}"
  
  cmake -G 'Unix Makefiles' \
        -DCMAKE_BUILD_TYPE:STRING=Release \
        -DCMAKE_INSTALL_PREFIX:PATH=/usr \
        -DLLVM_TARGETS_TO_BUILD=all \
        -DLLVM_APPEND_VC_REV:BOOL=ON \
        -DLLVM_ENABLE_RTTI:BOOL=ON \
        -DLLVM_ENABLE_FFI:BOOL=ON \
        -DFFI_INCLUDE_DIR:PATH="${_ffi_include_flags#-I}" \
        -DFFI_LIBRARY_DIR:PATH="${_ffi_libs_flags#-L}" \
        -DLLVM_BUILD_LLVM_DYLIB:BOOL=ON \
        -DLLVM_DYLIB_EXPORT_ALL:BOOL=ON \
        -DLLVM_LINK_LLVM_DYLIB:BOOL=ON \
        -DLLVM_BINUTILS_INCDIR:PATH=/usr/include \
        "../${pkgbase}-${pkgver}.src"

  make
  
  # install in clang packaging
  sed -i '/clang\/cmake_install.cmake/d' tools/cmake_install.cmake
  sed -i '/compiler-rt\/cmake_install.cmake/d' projects/cmake_install.cmake
}

package_llvm() {
pkgdesc="The LLVM Core libraries provide a modern source- and target-independent optimizer, along with code generation support for many popular CPUs."
depends=('perl' 'libffi')
conflicts=('llvm-ocaml')
replaces=('llvm-ocaml')

  #cd "${srcdir}/${pkgbase}-${pkgver}.src"
  cd build

  make DESTDIR="${pkgdir}" install

  # Move OCaml bindings 
  #rm -rf "${srcdir}"/{ocaml,ocamldoc}
  #mv "${pkgdir}"/usr/{lib/ocaml,share/doc/llvm/ocamldoc} "${srcdir}"

  # Remove duplicate files 
  #rm "${pkgdir}"/usr/{lib/libllvm*,share/doc/llvm/ocamldoc.tar.gz}

  # Fix permissions of static libs
  chmod -x "${pkgdir}"/usr/lib/*.a
  # Remove execute bit from static libraries
  #chmod -x "${pkgdir}"/usr/lib/ocaml/libllvm*.a

  #rm "${pkgdir}"/usr/lib/*LLVMHello.*

  install -D -m644 "${srcdir}/${pkgbase}-${pkgver}.src/LICENSE.TXT" "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"
}

package_clang() {
pkgdesc="C/C++/Objective-C compiler, which aims to deliver amazingly fast compiles, extremely useful error and warning messages and to provide a platform for building great source level tools."
url="http://clang.llvm.org/"
# http://old.nabble.com/%22clang--v%22-shows-a-GCC-call-td28378453.html
depends=("llvm=${pkgver}-${pkgrel}" "gcc=${_gcc_ver}")

  # Installation path docs
  #sed -e 's:$(PROJ_prefix)/share/doc/llvm:$(PROJ_prefix)/share/doc/clang:' \
  #    -i "${srcdir}/${pkgbase}-${pkgver}.src/Makefile.config"

  #cd "${srcdir}/${pkgbase}-${pkgver}.src"
  cd build/tools/clang
  make DESTDIR="${pkgdir}" install
  cd ../../projects/compiler-rt
  make DESTDIR="$pkgdir" install

  chmod -x "${pkgdir}"/usr/lib/*.a

  install -D -m644 "${srcdir}/${pkgbase}-${pkgver}.src/LICENSE.TXT" "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"
}

package_clang-analyzer() {
pkgdesc="Tool that automatically finds bugs in your code, example tool that can be built using the Clang frontend as a library to parse C/C++ code."
url="http://clang-analyzer.llvm.org/"
depends=("clang=${pkgver}-${pkgrel}" 'python2')

  cd "${srcdir}/${pkgbase}-${pkgver}.src/tools/clang"
  #cd llvm/tools/clang

  install -d "${pkgdir}"/usr/{bin,lib/clang-analyzer}
  for _tool in scan-{build,view}; do
    cp -a "tools/${_tool}" "${pkgdir}/usr/lib/clang-analyzer"
    ln -s "/usr/lib/clang-analyzer/${_tool}/${_tool}" "${pkgdir}/usr/bin"
  done

  # Python scripts
  python2 -m compileall "${pkgdir}/usr/lib/clang-analyzer"
  python2 -O -m compileall "${pkgdir}/usr/lib/clang-analyzer"

  install -D -m644 "${srcdir}/${pkgbase}-${pkgver}.src/LICENSE.TXT" "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"
}

