
pkgbase="llvm"
pkgname=('llvm' 'llvm-ocaml' 'clang' 'clang-analyzer')
pkgver=3.5.0
subver=3.5
_gcc_ver=4.9.2
pkgrel=2
arch=('x86_64')
url="http://llvm.org/"
license=('custom:University of Illinois/NCSA Open Source License')
makedepends=('gcc-libs' 'libffi' 'python2' 'ocaml' "gcc=${_gcc_ver}" 'groff')
source=("http://llvm.org/releases/${pkgver}/${pkgbase}-${pkgver}.src.tar.xz"
        "http://llvm.org/releases/$pkgver/cfe-$pkgver.src.tar.xz"
        "http://llvm.org/releases/$pkgver/compiler-rt-$pkgver.src.tar.xz")
md5sums=('d6987305a1a0e58e128c1374cd3b8fef'
         '27718dd13c7df83e15f997116bbb4aef'
         '02624d2a9144278c3808c00dbbab56c8')

build() {
  cd "${srcdir}/${pkgbase}-${pkgver}.src"

  # At the present, clang must reside inside the LLVM source code tree to build
  # See http://llvm.org/bugs/show_bug.cgi?id=4840
  mv "${srcdir}/cfe-${pkgver}.src" tools/clang

  mv "$srcdir/compiler-rt-$pkgver.src" projects/compiler-rt

  # Fix doc installation directories
  sed -i 's:\$(PROJ_prefix)/docs/llvm:$(PROJ_prefix)/share/doc/llvm:' \
      Makefile.config.in

  # Apply strip option to configure
  _optimized_switch="enable"
  [ "$(check_option strip)" == 'n' ] && _optimized_switch="disable"

  # Include location of libffi headers in CPPFLAGS
  export CPPFLAGS="${CPPFLAGS} $(pkg-config --cflags libffi)"

  _cxx_headers="/usr/include/c++/${_gcc_ver}"
  if [ ! -d "${_cxx_headers}" ]; then
    error "Couldn't find the C++ headers, PKGBUILD needs fixing!"
    return 1
  fi
  
  CC=gcc CXX=g++ \
  ./configure --prefix=/usr \
              --sysconfdir=/etc \
              --enable-shared \
              --enable-libffi \
              --enable-targets=all \
              --disable-expensive-checks \
              --disable-debug-runtime \
              --disable-assertions \
              --with-binutils-include=/usr/include \
              "--${_optimized_switch}-optimized"

  make REQUIRES_RTTI=1
}

package_llvm() {
pkgdesc="The LLVM Core libraries provide a modern source- and target-independent optimizer, along with code generation support for many popular CPUs."
depends=('perl' 'libffi')

  cd "${srcdir}/${pkgbase}-${pkgver}.src"

  # The OCaml binding installation is currently broken, let's fix it
  # see https://github.com/mxcl/homebrew/issues/8947#issuecomment-3256464
  sed -e 's:\$(ObjDir)/META.llvm:\$(OcamlDir)/META.llvm:' \
      -i bindings/ocaml/llvm/Makefile

  # We move the clang directory out of the tree so it won't get installed and
  # then we bring it back in for the clang package
  mv tools/clang "${srcdir}"
  # -j1 is due to race conditions during the installation of the OCaml bindings
  make -j1 DESTDIR="${pkgdir}" install
  mv "${srcdir}/clang" tools

  # OCaml bindings go to a separate package
  rm -rf "${srcdir}"/{ocaml,ocamldoc}
  mv "${pkgdir}"/usr/{lib/ocaml,share/doc/llvm/ocamldoc} "${srcdir}"

  # Remove duplicate files installed by the OCaml bindings
  rm "${pkgdir}"/usr/{lib/libllvm*,share/doc/llvm/ocamldoc.tar.gz}

  # Fix permissions of static libs
  chmod -x "${pkgdir}"/usr/lib/*.a


  # Get rid of example Hello transformation
  rm "${pkgdir}"/usr/lib/*LLVMHello.*

  install -D -m644 LICENSE.TXT "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"
}

package_llvm-ocaml() {
pkgdesc="OCaml bindings for LLVM."
depends=("llvm=${pkgver}-${pkgrel}" 'ocaml')

  cd "${srcdir}/${pkgbase}-${pkgver}.src"

  install -d "${pkgdir}"/{usr/lib,usr/share/doc/llvm}
  cp -r "${srcdir}/ocaml" "${pkgdir}/usr/lib"
  cp -r "${srcdir}/ocamldoc" "${pkgdir}/usr/share/doc/llvm"

  # Remove execute bit from static libraries
  chmod -x "${pkgdir}"/usr/lib/ocaml/libllvm*.a

  install -D -m644 LICENSE.TXT "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"
}

package_clang() {
pkgdesc="Clang is an \"LLVM native\" C/C++/Objective-C compiler, which aims to deliver amazingly fast compiles, extremely useful error and warning messages and to provide a platform for building great source level tools."
url="http://clang.llvm.org/"
# It looks like clang still needs GCC to assemble and link object files
# See http://old.nabble.com/%22clang--v%22-shows-a-GCC-call-td28378453.html
depends=("llvm=${pkgver}-${pkgrel}" "gcc=${_gcc_ver}")

  # Fix installation path for clang docs
  sed -e 's:$(PROJ_prefix)/share/doc/llvm:$(PROJ_prefix)/share/doc/clang:' \
      -i "${srcdir}/${pkgbase}-${pkgver}.src/Makefile.config"

  cd "${srcdir}/${pkgbase}-${pkgver}.src/tools/clang"
  make DESTDIR="${pkgdir}" install

  # Fix permissions of static libs
  chmod -x "${pkgdir}"/usr/lib/*.a

  # Revert the path change in case we want to do a repackage later
  sed -e 's:$(PROJ_prefix)/share/doc/clang:$(PROJ_prefix)/share/doc/llvm:' \
      -i "${srcdir}/${pkgbase}-${pkgver}.src/Makefile.config"

  install -D -m644 LICENSE.TXT "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"
}

package_clang-analyzer() {
pkgdesc="The Clang Static Analyzer is a tool that automatically finds bugs in your code, and is a great example of the sort of tool that can be built using the Clang frontend as a library to parse C/C++ code."
url="http://clang-analyzer.llvm.org/"
depends=("clang=${pkgver}-${pkgrel}" 'python2')

  cd "${srcdir}/${pkgbase}-${pkgver}.src/tools/clang"

  install -d "${pkgdir}"/usr/{bin,lib/clang-analyzer}
  for _tool in scan-{build,view}; do
    cp -r "tools/${_tool}" "${pkgdir}/usr/lib/clang-analyzer"
    ln -s "/usr/lib/clang-analyzer/${_tool}/${_tool}" "${pkgdir}/usr/bin"
  done

  # Use Python 2
  sed -e 's/env python$/&2/' \
      -i "${pkgdir}/usr/lib/clang-analyzer/scan-view/scan-view" \
      -i "${pkgdir}/usr/lib/clang-analyzer/scan-build/set-xcode-analyzer"

  # Compile Python scripts
  python2 -m compileall "${pkgdir}/usr/lib/clang-analyzer"
  python2 -O -m compileall "${pkgdir}/usr/lib/clang-analyzer"

  install -D -m644 LICENSE.TXT "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"
}

